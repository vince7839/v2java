# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B clean package -Dmaven.test.skip=true
      
    - name: show commit sha
      run: echo commit_id=>${{ github.sha }}

    - name: Build and push Docker images
      run: |
        # 登录阿里云镜像仓库
        docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }} registry.cn-hangzhou.aliyuncs.com
        # 使用Dockerfile构建镜像
        docker build . --file ./dubbo-provider/Dockerfile --tag registry.cn-hangzhou.aliyuncs.com/lwx_img_repo/dubbo-provider:1.0 --build-arg COMMIT_ID=${{ github.sha }}
        # 推送镜像到镜像仓库
        docker push registry.cn-hangzhou.aliyuncs.com/lwx_img_repo/dubbo-provider:1.0
        # 使用Dockerfile构建镜像
        docker build . --file ./dubbo-consumer/Dockerfile --tag registry.cn-hangzhou.aliyuncs.com/lwx_img_repo/dubbo-consumer:1.0 --build-arg COMMIT_ID=${{ github.sha }}
        # 推送镜像到镜像仓库
        docker push registry.cn-hangzhou.aliyuncs.com/lwx_img_repo/dubbo-consumer:1.0
